# GUSTAVO TEIXEIRA DOS SANTOS | TIA: 32197020
# CLEVERSON PEREIRA DA SILVA | TIA: 32198531

.data

	zero: .double 0.0 # variável que contem o valor 0 do tipo inteiro

	texto_inicial: .asciiz "\n\nPor favor, digite a opção desejada:\n\t1 - Operação com inteiros\n\t2 - Operação com ponto flutuante\nEscolha: "
	texto_erro: .asciiz "\nPor favor, digite um valor válido:\n"
	texto_opcao_operacao: .asciiz "\nPor favor, digite a operação desejada:\n\t1 - Adição\n\t2 - Subtração\n\t3 - Multiplicação\n\t4 - Divisão\nEscolha: "
	le_primeiro_valor: .asciiz "\nPor favor, digite o primeiro valor: "
	le_segundo_valor: .asciiz "\nPor favor, digite o segundo valor: "
	texto_resultado1: .asciiz "\nO resultado da operação entre "
	texto_resultado2: .asciiz " e "
	texto_resultado3: .asciiz " é: "
	texto_final: .asciiz "\n\n DESEJA UTILIZAR O SOFTWARE NOVAMENTE? (Digite 1 para sim): "

.text

	# ATRIBUI VALORES CONSTANTES PARA PARÂMETRO
	la $t1, 1 # Recebe valor constante 1
	la $t2, 2 # Recebe valor constante 2
	la $t3, 3 # Recebe valor constante 3
	la $t4, 4 # Recebe valor constante 4


	inicio:
		li $v0, 4 # Exibe o texto inicial para o usuário
		la $a0, texto_inicial
		syscall
		
		li $v0, 5 # Lê o tipo de operação que o usuário deseja (Inteiro ou Ponto Flutuante)
		syscall
		move $t0, $v0
	
		beq $t0, $t1, Inteiro # Se o usuário selecionou Inteiro, manda para a parte do código direcionada aos Inteiros
		beq $t0, $t2, Double # Se o usuário selecionou Ponto Flutuante, manda para a parte do código direcionada a Ponto Flutuante
	
		li $v0, 4
		la $a0, texto_erro # Se o usuário não digitou nenhum valor válido, exibe uma mensagem de erro e começa novamente.
		syscall
	
		j inicio
	
	
	
	Inteiro: # Parte do código direcionada a operação entre números inteiros
	
		
		li $v0, 4
		la $a0, texto_opcao_operacao # Exibe as opções possíveis para o usuário
		syscall
		
		li $v0, 5 # Lê a opção desejada do usuário
		syscall
		move $t0, $v0
		
		bgt $t0, $t4, erroInteiro # Se o valor digitado não for entre 1 e 4 (As opções válidas) retorna um erro
		blt $t0, $t1, erroInteiro
		
		li $v0, 4
		la $a0, le_primeiro_valor # Exibe mensagem pedindo para o usuário digitar o primeiro valor
		syscall
		
		li $v0, 5 # Lê o primeiro valor
		syscall
		move $a1, $v0
		
		li $v0, 4
		la $a0, le_segundo_valor # Exibe mensagem pedindo para o usuário digitar o segundo valor
		syscall
		
		li $v0, 5 # Lê o segundo valor
		syscall
		move $a2, $v0
		
		beq $t0, $t1, AdicaoInteiro # Chama a função da adição
		beq $t0, $t2, SubtracaoInteiro # Chama a função da subtração
		beq $t0, $t3, MultiplicacaoInteiro # Chama a função da multiplicação
		beq $t0, $t4, DivisaoInteiro # Chama a função da divisão por inteiros (Apenas divide os inteiros)
		
		
		erroInteiro:
			li $v0, 4
			la $a0, texto_erro # Se o usuário não digitou um valor válido, exibe uma mensagem de erro e executa essa parte do código novamente
			syscall
	
			j Inteiro
		
		
		
	Double: # Parte do código direcionada a operações com ponto flutuante
	
		li $v0, 4
		la $a0, texto_opcao_operacao # Exibe as opções possíveis para o usuário
		syscall
		
		li $v0, 5 # Lê a opção desejada do usuário
		syscall
		move $t0, $v0
		
		bgt $t0, $t4, erroDouble # Se o valor digitado não for entre 1 e 4 (Opções válidas) retorna um erro
		blt $t0, $t1, erroDouble
		
		li $v0, 4
		la $a0, le_primeiro_valor # Exibe mensagem pedindo para o usuário digitar o primeiro valor
		syscall
		
		li $v0, 7 # Lê o primeiro valor
		syscall
		ldc1 $f10, zero # Carrega o valor 0.0 em um registrador
		
		add.d $f2, $f10, $f0 # Move o valor para o registrador $f2
		
		li $v0, 4
		la $a0, le_segundo_valor # Exibe mensagem pedindo para o usuário digitar o segundo valor
		syscall
		
		li $v0, 7 # Lê o segundo valor
		syscall
		add.d $f4, $f10, $f0 # Move o valor para o registrador $f4

		beq $t0, $t1, AdicaoDouble # Chama a função da adição
		beq $t0, $t2, SubtracaoDouble # Chama a função da subtração
		beq $t0, $t3, MultiplicacaoDouble # Chama a função da multiplicação
		beq $t0, $t4, DivisaoDouble # Chama a função da divisão
		
		
		erroDouble: # Exibe mensagem de erro e volta para a seleção das opções nas operações double
			li $v0, 4
			la $a0, texto_erro
			syscall
	
			j Double
		
		
		
	exibe_resultado_inteiro: # Exibe os resultados dos números inteiros
	
		li $v0, 4 # Exibe a primeira mensagem
		la $a0, texto_resultado1
		syscall
		
		li $v0, 1 # Exibe o primeiro valor envolvido na operação
		move $a0, $a1
		syscall
		
		li $v0, 4 # Exibe o complemento da mensagem
		la $a0, texto_resultado2
		syscall
		
		li $v0, 1 # Exibe o segundo valor envolvido na operação
		move $a0, $a2
		syscall
		
		li $v0, 4 # Exibe o complemento da mensagem
		la $a0, texto_resultado3
		syscall
		
		li $v0, 1 # Exibe o resultado da operação
		move $a0, $v1
		syscall
		
		j usar_novamente # Exibe uma mensagem perguntando se o usuário deseja usar o software novamente
		
		
		
	exibe_resultado_double: # Exibe o resultado das operações com ponto flutuante
	
		li $v0, 4 # Exibe o começo da mensagem
		la $a0, texto_resultado1
		syscall
		
		li $v0, 3 # Exibe o primeiro valor envolvido na operação
		add.d $f12, $f2, $f10
		syscall
		
		li $v0, 4 # Exibe o complemento da mensagem
		la $a0, texto_resultado2
		syscall
		
		li $v0, 3 # Exibe o segundo valor envolvido na operação
		add.d $f12, $f4, $f10
		syscall
		
		li $v0, 4 # Exibe o complemento da mensagem
		la $a0, texto_resultado3
		syscall
		
		li $v0, 3 # Exibe o resultado da operação
		add.d $f12, $f6, $f10
		syscall
		
		
		
	usar_novamente: # Exibe a opção de o usuário utilizar o programa novamente
		
		li $v0, 4 # Exibe uma mensagem perguntando se o usuário deseja realizar a operação novamente
		la $a0, texto_final
		syscall
		
		li $v0, 5 # Lê a opção digitada pelo usuário
		syscall
		
		beq $v0, $t1, inicio # Se o usuário deseja utilizar novamente, retorna para o começo do programa
		
		li $v0, 10 # Caso contrário, encerra a execução
		syscall
	
	
	
	AdicaoInteiro: # Realiza adição de inteiros

		add $v1, $a1, $a2
		j exibe_resultado_inteiro

	SubtracaoInteiro: # Realiza subtração de inteiros
	
		sub $v1, $a1, $a2
		j exibe_resultado_inteiro
	
	MultiplicacaoInteiro: # Realiza multiplicação de inteiros
	
		mul $v1, $a1, $a2
		j exibe_resultado_inteiro
	
	DivisaoInteiro: # Realiza divisão de inteiros (Retornando apenas o quociente da operação)
	
		div $a1, $a2
		mflo $v1
		j exibe_resultado_inteiro
	
	AdicaoDouble: # Realiza a soma em ponto flutuante
	
		add.d $f6, $f2, $f4
		j exibe_resultado_double
	
	SubtracaoDouble: # Realiza a subtração em ponto flutuante
	
		sub.d $f6, $f2, $f4
		j exibe_resultado_double
	
	MultiplicacaoDouble: # Realiza a multiplicação em ponto flutuante
	
		mul.d $f6, $f2, $f4
		j exibe_resultado_double
	
	DivisaoDouble: # Realiza a divisão em ponto flutuante
	
		div.d $f6, $f2, $f4
		j exibe_resultado_double
	
